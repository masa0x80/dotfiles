[[plugins]]
repo = 'Shougo/denite.nvim'
rev = '2b884d5d990539fe25b44398146645dafc8ffa49'
on_event = 'VimEnter'
hook_add = ''' " {{{
  nnoremap <silent> <Leader>E :<C-u>Denite file/rec<CR>
  nnoremap <silent> <Leader>F :<C-u>Denite file/rec -path=`expand('%:t') != '' ? substitute(expand('%:p:h'), '^' . getcwd() . '/', '', '') : ''`<CR>
  nnoremap <silent> <Leader>r :<C-u>Denite -resume<CR>
  nnoremap <silent> <Leader>y :<C-u>Denite neoyank<CR>
  nnoremap <silent> <Leader>* :<C-u>Denite line -input=<C-r><C-w><CR>
  nnoremap <silent> <Leader>g :<C-u>Denite grep<CR>
  nnoremap <silent> <Leader>G :<C-u>DeniteCursorWord grep -input=<C-r><C-w><CR><CR>

  nnoremap <silent> >> :<C-u>Denite -resume -cursor-pos=+1 -immediately<CR>
  nnoremap <silent> << :<C-u>Denite -resume -cursor-pos=-1 -immediately<CR>

  augroup Denite
    autocmd!
    autocmd FileType denite call s:denite_settings()
  augroup END
  function! s:denite_settings() abort
    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q denite#do_map('quit')
    nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
  endfunction
" }}} '''
hook_post_source = 'source ~/.config/nvim/userautoload/plugins/config/denite.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim']
on_event = 'InsertEnter'
hook_source = 'source ~/.config/nvim/userautoload/plugins/config/deoplete.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_ft = 'snippet'
on_event = 'InsertCharPre'
hook_add = 'source ~/.config/nvim/userautoload/plugins/config/neosnippet.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'
on_event = 'InsertEnter'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyA'
hook_add = 'source ~/.config/nvim/userautoload/plugins/config/easy-align.vim'

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'
on_ft = 'javascript'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'rcmdnk/vim-markdown'
depends = ['tabular', 'vim-markdown-quote-syntax']
on_ft = ['markdown', 'mkd', 'md']
hook_add = 'source ~/.config/nvim/userautoload/plugins/config/markdown.vim'

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_source = '''
  let g:go_fmt_command = 'goimports'
  let s:goargs = go#package#ImportPath(expand('%:p:h'))
  let g:neomake_go_errcheck_maker = {
    \ 'args': ['-abspath', s:goargs],
    \ 'append_file': 0,
    \ 'errorformat': '%f:%l:%c:\ %m, %f:%l:%c\ %#%m',
    \ }
  let g:neomake_go_enabled_makers = ['golint', 'govet', 'errcheck']
'''

[[plugins]]
repo = 'dag/vim-fish'
on_ft = ['fish']

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby']
hook_source = '''
  let g:neomake_ruby_enabled_makers = ['rubocop']
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Plug>'
hook_add = 'source ~/.config/nvim/userautoload/plugins/config/quickrun.vim'

[[plugins]]
repo = 'LeafCage/foldCC'
on_event = 'VimEnter'
hook_add = 'source ~/.config/nvim/userautoload/plugins/config/foldCC.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
on_event = 'VimEnter'
hook_source = 'source ~/.config/nvim/userautoload/plugins/config/lightline.vim'

[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map ='<Plug>(git-messenger'
hook_add = '''
  let g:git_messenger_no_default_mappings = v:true
  nmap <C-l><C-l> <Plug>(git-messenger)
'''
